// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//Whenever you update your Prisma schema, you will need to run the prisma "npx prisma db push" command to create new indexes and regenerate Prisma Client. You can also use the --force flag to skip the interactive confirmation prompt.


// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://admin:dr48aIZk4FLzzx1d@cluster0.zacaklp.mongodb.net/rims-platform?retryWrites=true&w=majority"
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String @unique
  status       String
  category     String
  origin       String

  productApplications ProductApplication[] // Establish a relation with the junction model

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// This is the join table that connects the many-to-many relationship between Products and Applications
model ProductApplication {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  product      Product @relation(fields: [productId], references: [id])
  productId    String @db.ObjectId
  application  Application @relation(fields: [applicationId], references: [id])
  applicationId String @db.ObjectId
}

model Application {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String @unique
  status       String

  productApplications ProductApplication[] // Establish a relation with the junction model
  registrations Registration[] // Establish a relation with the junction model
  submissions Submission[] // Establish a relation with the junction model

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Registration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  status      String

  application   Application      @relation(fields: [applicationId], references: [id])
  applicationId String    @db.ObjectId

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Submission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  status      String

  application   Application      @relation(fields: [applicationId], references: [id])
  applicationId String    @db.ObjectId

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

