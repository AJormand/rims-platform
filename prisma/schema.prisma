// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//Whenever you update your Prisma schema, you will need to run the prisma "npx prisma db push" command to create new indexes and regenerate Prisma Client. You can also use the --force flag to skip the interactive confirmation prompt.
//to run prisma studio to see data locally: npx prisma studio

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

//Prisma IMPLICIT many 2 many relationship --> prisma manages the junction table under the hood
// --> you get ease of use but cant add extra fields to the junction table
//Prisma EXPLICIT many 2 many relationship --> you manage the junction table yourself

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://admin:dr48aIZk4FLzzx1d@cluster0.zacaklp.mongodb.net/rims-platform?retryWrites=true&w=majority"
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String @unique
  status   String
  category String
  origin   String

  productApplications  Product2Application[] // Establish a relation with the junction model
  productRegistrations Registration[] // Establish a relation with the junction model
  productSubstances    Product2Substance[] // Establish a relation with the junction model
  productOrganizations Product2Organization[] // Establish a relation with the junction model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This is the join table that connects the many-to-many relationship between Products and Applications
model Product2Application {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id])
  productId     String      @db.ObjectId
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String      @db.ObjectId

  createdAt DateTime @default(now())
}

model Product2Substance {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id])
  productId   String    @db.ObjectId
  substance   Substance @relation(fields: [substanceId], references: [id])
  substanceId String    @db.ObjectId

  quantity String?
  unit     String?

  createdAt DateTime @default(now())
}

model Product2Organization {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  product        Product      @relation(fields: [productId], references: [id])
  productId      String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId

  partnershipType String?

  createdAt DateTime @default(now())
}

model Application {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String @unique
  country       String
  procedureType String
  status        String

  products2Application Product2Application[] // Establish a relation with the junction model
  registrations        Registration[] // Establish a relation with the junction model
  submissions          Submission[] // Establish a relation with the junction model
  countries            Country[] // Establish a relation with Country model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Registration {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  name               String  @unique
  status             String
  country            String
  registrationNumber String?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  status String

  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Substance {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  type   String
  EVcode String

  product2Substance Product2Substance[] // Establish a relation with the junction model

  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String @unique
  country String
  address String

  product2Organization Product2Organization[] // Establish a relation with the junction model

  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  code   String @unique
  region String

  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?      @db.ObjectId
}

model ControlledVocabulary {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  value       String
  description String?

  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model newCol {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  surname String
  address String
  age     String
}
